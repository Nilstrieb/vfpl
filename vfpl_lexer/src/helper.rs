use crate::tokens::CondKeyword;
use crate::TokenKind;

pub fn compute_keyword(identifier: &str) -> Option<TokenKind> {
    Some(match identifier {
        "absent" => TokenKind::Absent,
        "and" => TokenKind::And,
        "as" => TokenKind::As,
        "break" => TokenKind::Break,
        "call" => TokenKind::Call,
        "check" => TokenKind::Check,
        "create" => TokenKind::Create,
        "define" => TokenKind::Define,
        "do" => TokenKind::Do,
        "end" => TokenKind::End,
        "false" => TokenKind::False,
        "function" => TokenKind::Function,
        "initialize" => TokenKind::Initialize,
        "not" => TokenKind::Not,
        "novalue" => TokenKind::NoValue,
        "null" => TokenKind::Null,
        "or" => TokenKind::Or,
        "otherwise" => TokenKind::Otherwise,
        "please" => TokenKind::Please,
        "repeat" => TokenKind::Repeat,
        "return" => TokenKind::Return,
        "structure" => TokenKind::Structure,
        "then" => TokenKind::Then,
        "this" => TokenKind::This,
        "true" => TokenKind::True,
        "undefined" => TokenKind::Undefined,
        "variable" => TokenKind::Variable,
        "whether" => TokenKind::Whether,
        "while" => TokenKind::While,
        "add" => TokenKind::CondKw(CondKeyword::Add),
        "argument" => TokenKind::CondKw(CondKeyword::Argument),
        "arguments" => TokenKind::CondKw(CondKeyword::Arguments),
        "by" => TokenKind::CondKw(CondKeyword::By),
        "div" => TokenKind::CondKw(CondKeyword::Div),
        "does" => TokenKind::CondKw(CondKeyword::Does),
        "equal" => TokenKind::CondKw(CondKeyword::Equal),
        "field" => TokenKind::CondKw(CondKeyword::Field),
        "fields" => TokenKind::CondKw(CondKeyword::Fields),
        "from" => TokenKind::CondKw(CondKeyword::From),
        "go" => TokenKind::CondKw(CondKeyword::Go),
        "greater" => TokenKind::CondKw(CondKeyword::Greater),
        "has" => TokenKind::CondKw(CondKeyword::Has),
        "have" => TokenKind::CondKw(CondKeyword::Have),
        "is" => TokenKind::CondKw(CondKeyword::Is),
        "less" => TokenKind::CondKw(CondKeyword::Less),
        "modulo" => TokenKind::CondKw(CondKeyword::Mod),
        "mul" => TokenKind::CondKw(CondKeyword::Mul),
        "no" => TokenKind::CondKw(CondKeyword::No),
        "of" => TokenKind::CondKw(CondKeyword::Of),
        "out" => TokenKind::CondKw(CondKeyword::Out),
        "parameter" => TokenKind::CondKw(CondKeyword::Parameter),
        "parameters" => TokenKind::CondKw(CondKeyword::Parameters),
        "returns" => TokenKind::CondKw(CondKeyword::Returns),
        "set" => TokenKind::CondKw(CondKeyword::Set),
        "sleep" => TokenKind::CondKw(CondKeyword::Sleep),
        "sub" => TokenKind::CondKw(CondKeyword::Sub),
        "take" => TokenKind::CondKw(CondKeyword::Take),
        "than" => TokenKind::CondKw(CondKeyword::Than),
        "that" => TokenKind::CondKw(CondKeyword::That),
        "the" => TokenKind::CondKw(CondKeyword::The),
        "to" => TokenKind::CondKw(CondKeyword::To),
        "value" => TokenKind::CondKw(CondKeyword::Value),
        "with" => TokenKind::CondKw(CondKeyword::With),
        _ => return None,
    })
}
